# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from coala.pb import tracking_service_pb2 as coala_dot_pb_dot_tracking__service__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in coala/pb/tracking_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class TrackingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrackTaskMetric = channel.unary_unary(
                '/coala.pb.TrackingService/TrackTaskMetric',
                request_serializer=coala_dot_pb_dot_tracking__service__pb2.TrackTaskMetricRequest.SerializeToString,
                response_deserializer=coala_dot_pb_dot_tracking__service__pb2.TrackTaskMetricResponse.FromString,
                _registered_method=True)
        self.TrackRoundMetric = channel.unary_unary(
                '/coala.pb.TrackingService/TrackRoundMetric',
                request_serializer=coala_dot_pb_dot_tracking__service__pb2.TrackRoundMetricRequest.SerializeToString,
                response_deserializer=coala_dot_pb_dot_tracking__service__pb2.TrackRoundMetricResponse.FromString,
                _registered_method=True)
        self.TrackClientMetric = channel.unary_unary(
                '/coala.pb.TrackingService/TrackClientMetric',
                request_serializer=coala_dot_pb_dot_tracking__service__pb2.TrackClientMetricRequest.SerializeToString,
                response_deserializer=coala_dot_pb_dot_tracking__service__pb2.TrackClientMetricResponse.FromString,
                _registered_method=True)
        self.TrackClientTrainMetric = channel.unary_unary(
                '/coala.pb.TrackingService/TrackClientTrainMetric',
                request_serializer=coala_dot_pb_dot_tracking__service__pb2.TrackClientTrainMetricRequest.SerializeToString,
                response_deserializer=coala_dot_pb_dot_tracking__service__pb2.TrackClientTrainMetricResponse.FromString,
                _registered_method=True)
        self.TrackClientTestMetric = channel.unary_unary(
                '/coala.pb.TrackingService/TrackClientTestMetric',
                request_serializer=coala_dot_pb_dot_tracking__service__pb2.TrackClientTestMetricRequest.SerializeToString,
                response_deserializer=coala_dot_pb_dot_tracking__service__pb2.TrackClientTestMetricResponse.FromString,
                _registered_method=True)
        self.GetRoundMetrics = channel.unary_unary(
                '/coala.pb.TrackingService/GetRoundMetrics',
                request_serializer=coala_dot_pb_dot_tracking__service__pb2.GetRoundMetricsRequest.SerializeToString,
                response_deserializer=coala_dot_pb_dot_tracking__service__pb2.GetRoundMetricsResponse.FromString,
                _registered_method=True)
        self.GetClientMetrics = channel.unary_unary(
                '/coala.pb.TrackingService/GetClientMetrics',
                request_serializer=coala_dot_pb_dot_tracking__service__pb2.GetClientMetricsRequest.SerializeToString,
                response_deserializer=coala_dot_pb_dot_tracking__service__pb2.GetClientMetricsResponse.FromString,
                _registered_method=True)
        self.GetRoundTrainTestTime = channel.unary_unary(
                '/coala.pb.TrackingService/GetRoundTrainTestTime',
                request_serializer=coala_dot_pb_dot_tracking__service__pb2.GetRoundTrainTestTimeRequest.SerializeToString,
                response_deserializer=coala_dot_pb_dot_tracking__service__pb2.GetRoundTrainTestTimeResponse.FromString,
                _registered_method=True)


class TrackingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TrackTaskMetric(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrackRoundMetric(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrackClientMetric(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrackClientTrainMetric(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrackClientTestMetric(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRoundMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClientMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRoundTrainTestTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrackingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TrackTaskMetric': grpc.unary_unary_rpc_method_handler(
                    servicer.TrackTaskMetric,
                    request_deserializer=coala_dot_pb_dot_tracking__service__pb2.TrackTaskMetricRequest.FromString,
                    response_serializer=coala_dot_pb_dot_tracking__service__pb2.TrackTaskMetricResponse.SerializeToString,
            ),
            'TrackRoundMetric': grpc.unary_unary_rpc_method_handler(
                    servicer.TrackRoundMetric,
                    request_deserializer=coala_dot_pb_dot_tracking__service__pb2.TrackRoundMetricRequest.FromString,
                    response_serializer=coala_dot_pb_dot_tracking__service__pb2.TrackRoundMetricResponse.SerializeToString,
            ),
            'TrackClientMetric': grpc.unary_unary_rpc_method_handler(
                    servicer.TrackClientMetric,
                    request_deserializer=coala_dot_pb_dot_tracking__service__pb2.TrackClientMetricRequest.FromString,
                    response_serializer=coala_dot_pb_dot_tracking__service__pb2.TrackClientMetricResponse.SerializeToString,
            ),
            'TrackClientTrainMetric': grpc.unary_unary_rpc_method_handler(
                    servicer.TrackClientTrainMetric,
                    request_deserializer=coala_dot_pb_dot_tracking__service__pb2.TrackClientTrainMetricRequest.FromString,
                    response_serializer=coala_dot_pb_dot_tracking__service__pb2.TrackClientTrainMetricResponse.SerializeToString,
            ),
            'TrackClientTestMetric': grpc.unary_unary_rpc_method_handler(
                    servicer.TrackClientTestMetric,
                    request_deserializer=coala_dot_pb_dot_tracking__service__pb2.TrackClientTestMetricRequest.FromString,
                    response_serializer=coala_dot_pb_dot_tracking__service__pb2.TrackClientTestMetricResponse.SerializeToString,
            ),
            'GetRoundMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoundMetrics,
                    request_deserializer=coala_dot_pb_dot_tracking__service__pb2.GetRoundMetricsRequest.FromString,
                    response_serializer=coala_dot_pb_dot_tracking__service__pb2.GetRoundMetricsResponse.SerializeToString,
            ),
            'GetClientMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClientMetrics,
                    request_deserializer=coala_dot_pb_dot_tracking__service__pb2.GetClientMetricsRequest.FromString,
                    response_serializer=coala_dot_pb_dot_tracking__service__pb2.GetClientMetricsResponse.SerializeToString,
            ),
            'GetRoundTrainTestTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoundTrainTestTime,
                    request_deserializer=coala_dot_pb_dot_tracking__service__pb2.GetRoundTrainTestTimeRequest.FromString,
                    response_serializer=coala_dot_pb_dot_tracking__service__pb2.GetRoundTrainTestTimeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coala.pb.TrackingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('coala.pb.TrackingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TrackingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TrackTaskMetric(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coala.pb.TrackingService/TrackTaskMetric',
            coala_dot_pb_dot_tracking__service__pb2.TrackTaskMetricRequest.SerializeToString,
            coala_dot_pb_dot_tracking__service__pb2.TrackTaskMetricResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TrackRoundMetric(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coala.pb.TrackingService/TrackRoundMetric',
            coala_dot_pb_dot_tracking__service__pb2.TrackRoundMetricRequest.SerializeToString,
            coala_dot_pb_dot_tracking__service__pb2.TrackRoundMetricResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TrackClientMetric(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coala.pb.TrackingService/TrackClientMetric',
            coala_dot_pb_dot_tracking__service__pb2.TrackClientMetricRequest.SerializeToString,
            coala_dot_pb_dot_tracking__service__pb2.TrackClientMetricResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TrackClientTrainMetric(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coala.pb.TrackingService/TrackClientTrainMetric',
            coala_dot_pb_dot_tracking__service__pb2.TrackClientTrainMetricRequest.SerializeToString,
            coala_dot_pb_dot_tracking__service__pb2.TrackClientTrainMetricResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TrackClientTestMetric(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coala.pb.TrackingService/TrackClientTestMetric',
            coala_dot_pb_dot_tracking__service__pb2.TrackClientTestMetricRequest.SerializeToString,
            coala_dot_pb_dot_tracking__service__pb2.TrackClientTestMetricResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRoundMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coala.pb.TrackingService/GetRoundMetrics',
            coala_dot_pb_dot_tracking__service__pb2.GetRoundMetricsRequest.SerializeToString,
            coala_dot_pb_dot_tracking__service__pb2.GetRoundMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetClientMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coala.pb.TrackingService/GetClientMetrics',
            coala_dot_pb_dot_tracking__service__pb2.GetClientMetricsRequest.SerializeToString,
            coala_dot_pb_dot_tracking__service__pb2.GetClientMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRoundTrainTestTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/coala.pb.TrackingService/GetRoundTrainTestTime',
            coala_dot_pb_dot_tracking__service__pb2.GetRoundTrainTestTimeRequest.SerializeToString,
            coala_dot_pb_dot_tracking__service__pb2.GetRoundTrainTestTimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
